{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAG+C,SAAtCC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAkDAO,SAASC,cAAc,SAC/BC,iBAAiB,UA9CO,SAAPC,GACpBA,EAAMC,iBAEN,MAAMC,EAAOF,EAAMG,OACbC,EAAaF,EAAKJ,cAAc,uBAChCO,EAAYH,EAAKJ,cAAc,sBAC/BQ,EAAcJ,EAAKJ,cAAc,wBAEjCS,EAAQC,SAASJ,EAAWK,OAC5BC,EAAOF,SAASH,EAAUI,OAC1BE,EAASH,SAASF,EAAYG,OAEpC,GAAIG,MAAML,IAAUK,MAAMF,IAASE,MAAMD,GAEvC,YADAE,EAAA3B,GAAS4B,OAAOC,QAAQ,iDAKG,MAAvBC,EAAW,GAEjB,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAQM,IAAK,CAC/B,MAAMC,EAAeX,EAAQU,EAAIP,EAEjCtB,EAAc6B,EAAI,EAAGC,GAClBC,MAAK,EAAC9B,SAAEA,EAAQC,MAAEA,MACjBuB,EAAA3B,GAAS4B,OAAOM,QACd,uBAAqB/B,QAAiBC,MAAU,IAGnD+B,OAAM,EAAChC,SAAEA,EAAQC,MAAEA,MAClBuB,EAAA3B,GAAS4B,OAAOC,QACd,sBAAoB1B,QAAiBC,MAAU,IAIrD0B,EAASM,KAAKlC,EAAc6B,EAAI,EAAGC,G,CAIXd,EAAfK,MAAQ,GACnBJ,EAAUI,MAAQ,GAClBH,EAAYG,MAAQ,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// Функція для створення промісу з відповідною затримкою\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Функція для обробки сабміту форми\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const form = event.target;\n  const delayInput = form.querySelector('input[name=\"delay\"]');\n  const stepInput = form.querySelector('input[name=\"step\"]');\n  const amountInput = form.querySelector('input[name=\"amount\"]');\n\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  if (isNaN(delay) || isNaN(step) || isNaN(amount)) {\n    Notiflix.Notify.failure('Please fill in all fields with valid numbers.');\n    return;\n  }\n\n  // Створюємо проміси і обробляємо їх\n  const promises = [];\n\n  for (let i = 0; i < amount; i++) {\n    const currentDelay = delay + i * step;\n\n    createPromise(i + 1, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    promises.push(createPromise(i + 1, currentDelay));\n  }\n\n  // Очищаємо значення полів форми\n  delayInput.value = '';\n  stepInput.value = '';\n  amountInput.value = '';\n}\n\n// Додаємо обробник події для форми\nconst form = document.querySelector('.form');\nform.addEventListener('submit', handleSubmit);\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","event","preventDefault","form1","target","delayInput","stepInput","amountInput","delay1","parseInt","value","step","amount","isNaN","$parcel$interopDefault","Notify","failure","promises","i","currentDelay","then","success","catch","push"],"version":3,"file":"03-promises.6832cb43.js.map"}